services:
  # MinIO - S3-compatible object storage
  minio:
    image: minio/minio:latest
    container_name: gridata-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
      MINIO_DOMAIN: localhost
    command: server /data --console-address ":9001"
    volumes:
      - minio-data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Create MinIO buckets
  minio-setup:
    image: minio/mc:latest
    container_name: gridata-minio-setup
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      sleep 5;
      mc alias set minio http://minio:9000 minioadmin minioadmin123;
      mc mb --ignore-existing minio/gridata-raw;
      mc mb --ignore-existing minio/gridata-staging;
      mc mb --ignore-existing minio/gridata-curated;
      mc mb --ignore-existing minio/gridata-archive;
      mc mb --ignore-existing minio/gridata-checkpoints;
      echo 'MinIO buckets created successfully';
      "

  # PostgreSQL - Metadata database for Airflow and DataHub
  postgres:
    image: postgres:14-alpine
    container_name: gridata-postgres
    environment:
      POSTGRES_USER: gridata
      POSTGRES_PASSWORD: gridata123
      POSTGRES_DB: airflow
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./docker/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U gridata"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis - Celery broker (optional, for CeleryExecutor)
  redis:
    image: redis:7-alpine
    container_name: gridata-redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Airflow Webserver
  airflow-webserver:
    image: apache/airflow:2.7.0-python3.11
    container_name: gridata-airflow-webserver
    depends_on:
      - postgres
      - redis
      - minio
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://gridata:gridata123@postgres/airflow
      AIRFLOW__CORE__FERNET_KEY: 'UGxlYXNlR2VuZXJhdGVBRmVybmV0S2V5Rm9yUHJvZA=='
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth'
      AIRFLOW__WEBSERVER__EXPOSE_CONFIG: 'true'
      AIRFLOW_CONN_MINIO_DEFAULT: 's3://minioadmin:minioadmin123@?host=http://minio:9000'
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: admin
      _AIRFLOW_WWW_USER_PASSWORD: admin
    ports:
      - "8080:8080"
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/plugins:/opt/airflow/plugins
      - airflow-logs:/opt/airflow/logs
    command: webserver
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Airflow Scheduler
  airflow-scheduler:
    image: apache/airflow:2.7.0-python3.11
    container_name: gridata-airflow-scheduler
    depends_on:
      - postgres
      - redis
      - airflow-webserver
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://gridata:gridata123@postgres/airflow
      AIRFLOW__CORE__FERNET_KEY: 'UGxlYXNlR2VuZXJhdGVBRmVybmV0S2V5Rm9yUHJvZA=='
      AIRFLOW_CONN_MINIO_DEFAULT: 's3://minioadmin:minioadmin123@?host=http://minio:9000'
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/plugins:/opt/airflow/plugins
      - airflow-logs:/opt/airflow/logs
    command: scheduler

  # Spark Master
  spark-master:
    image: apache/spark:3.5.0
    container_name: gridata-spark-master
    command: /opt/spark/bin/spark-class org.apache.spark.deploy.master.Master
    ports:
      - "8081:8080"
      - "7077:7077"
    volumes:
      - ./spark-jobs:/opt/spark-jobs
      - spark-data:/opt/spark-data
    environment:
      - SPARK_NO_DAEMONIZE=true

  # Spark Worker
  spark-worker:
    image: apache/spark:3.5.0
    container_name: gridata-spark-worker
    depends_on:
      - spark-master
    command: /opt/spark/bin/spark-class org.apache.spark.deploy.worker.Worker spark://spark-master:7077
    environment:
      - SPARK_WORKER_MEMORY=2G
      - SPARK_WORKER_CORES=2
      - SPARK_NO_DAEMONIZE=true
    volumes:
      - ./spark-jobs:/opt/spark-jobs
      - spark-data:/opt/spark-data

  # Elasticsearch - For DataHub search
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.9
    container_name: gridata-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Kafka - For DataHub metadata events
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: gridata-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: gridata-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'

volumes:
  minio-data:
  postgres-data:
  airflow-logs:
  spark-data:
  elasticsearch-data:

networks:
  default:
    name: gridata-network
